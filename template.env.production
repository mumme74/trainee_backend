# used as the secret to create JsonWebTokens
# sha256 -x -> "This should be obvious!"
# You should regenerate to anoter hash to be secure!
JWT_SECRET=4dad38f990dc3e4775c4fe5007231efd18476ddd50ae888d6cea459df6045f7d

# the name of the application
APP_NAME=trainee

# Database connection options
DB_HOST=
DB_USER=TraineeUser
DB_PASS=password
DB_PORT=
DB_NAME=Trainee

# which host and port to serve on
PORT=3001
HOST=localhost
PROTOCOL=http:

# Cross origin resource, ie were your html app is lodaded from
CORS_HOST=http://localhost:3000

# google oath2 credentials
# these are oviously random, you should use youre own
GOOGLE_CLIENT_ID=6ca9368cce05-c33b0cc836c0359683497825751b2hde.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=8d54ea528e428ac57196a1b8

# These are used to filter new users as teachers directly
# if it can be determined by the email
# match teacher regex
ENABLE_AUTO_ROLE_TEACHER=true
# only Ã¤run this auto escalation when authentication through Google
AUTO_ROLE_REQUIRE_GOOGLE_ID=true
# a regex to filter teachers.
# example:
#  students: user1@school.domain.edu
#  teacher:  user2@domain.edu
TEACHER_EMAIL_REGEX=[^@]@domain\.edu$
# a filter to match firstname from Google name from oauth2 token
# example given this format: Mr Users Userson 123GR
# firstname regex: (?<=Mrs?\s+)\S+
# lastName regex: (?<=Mrs?\s+\S+\s+)\S+
TEACHER_FIRST_NAME_REGEX=
TEACHER_LAST_NAME_REGEX=^.*\s363(?:KU|TE|KA)GY$
TEACHER_DOMAIN_REGEX=^domain\.edu$

# Auto enable A specific user as Super admin
# Usefull unly during intial setup.
# Should probably be disabled If you can escalate role
# directly to sql server
# system Requires at least one super user
ENABLE_AUTO_ROLE_SUPER_ADMIN=true
SUPER_ADMIN_EMAIL_REGEX=^User\.Userson@domain\.edu$

